package com.github.d88a.farmereconomist.events;

import com.github.d88a.farmereconomist.FarmerEconomist;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.*;

public class FarmingEventManager {

    private final FarmerEconomist plugin;
    private final Map<String, FarmingEvent> events = new HashMap<>();
    private FarmingEvent currentEvent = null;
    private long eventStartTime = 0;
    private final long EVENT_DURATION = 20L * 60 * 30; // 30 –º–∏–Ω—É—Ç

    public FarmingEventManager(FarmerEconomist plugin) {
        this.plugin = plugin;
        setupEvents();
        startEventScheduler();
    }

    private void setupEvents() {
        // –°–æ–±—ã—Ç–∏–µ "–ó–æ–ª–æ—Ç–∞—è –ª–∏—Ö–æ—Ä–∞–¥–∫–∞"
        events.put("golden_rush", new FarmingEvent(
            "golden_rush",
            "–ó–æ–ª–æ—Ç–∞—è –ª–∏—Ö–æ—Ä–∞–¥–∫–∞",
            "¬ß6üí∞ –í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–∞—é—Ç –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç!",
            30 * 60, // 30 –º–∏–Ω—É—Ç
            EventType.MONEY_BOOST,
            3.0
        ));

        // –°–æ–±—ã—Ç–∏–µ "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ä–æ—Å—Ç"
        events.put("speed_growth", new FarmingEvent(
            "speed_growth",
            "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ä–æ—Å—Ç",
            "¬ßa‚ö° –í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Ä–∞—Å—Ç—É—Ç –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!",
            20 * 60, // 20 –º–∏–Ω—É—Ç
            EventType.GROWTH_BOOST,
            2.0
        ));

        // –°–æ–±—ã—Ç–∏–µ "–î–≤–æ–π–Ω–æ–π —É—Ä–æ–∂–∞–π"
        events.put("double_harvest", new FarmingEvent(
            "double_harvest",
            "–î–≤–æ–π–Ω–æ–π —É—Ä–æ–∂–∞–π",
            "¬ßeüåæ –í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–∞—é—Ç –¥–≤–æ–π–Ω–æ–π —É—Ä–æ–∂–∞–π!",
            25 * 60, // 25 –º–∏–Ω—É—Ç
            EventType.HARVEST_BOOST,
            2.0
        ));

        // –°–æ–±—ã—Ç–∏–µ "–°—á–∞—Å—Ç–ª–∏–≤—ã–π —á–∞—Å"
        events.put("lucky_hour", new FarmingEvent(
            "lucky_hour",
            "–°—á–∞—Å—Ç–ª–∏–≤—ã–π —á–∞—Å",
            "¬ßdüçÄ 50% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–¥–∫–∏–µ —Å–µ–º–µ–Ω–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ!",
            15 * 60, // 15 –º–∏–Ω—É—Ç
            EventType.LUCKY_DROP,
            0.5
        ));

        // –°–æ–±—ã—Ç–∏–µ "–§–µ—Å—Ç–∏–≤–∞–ª—å —Ü–≤–µ—Ç–æ–≤"
        events.put("flower_festival", new FarmingEvent(
            "flower_festival",
            "–§–µ—Å—Ç–∏–≤–∞–ª—å —Ü–≤–µ—Ç–æ–≤",
            "¬ßdüå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã –¥–∞—é—Ç –≤ 4 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —É—Ä–æ–∂–∞—è!",
            35 * 60, // 35 –º–∏–Ω—É—Ç
            EventType.FLOWER_BOOST,
            4.0
        ));

        // –°–æ–±—ã—Ç–∏–µ "–ù–æ—á–Ω–æ–µ —Ü–≤–µ—Ç–µ–Ω–∏–µ"
        events.put("night_bloom", new FarmingEvent(
            "night_bloom",
            "–ù–æ—á–Ω–æ–µ —Ü–≤–µ—Ç–µ–Ω–∏–µ",
            "¬ß5üåô –°–≤–µ—Ç—è—â–∏–µ—Å—è –∫—É–ª—å—Ç—É—Ä—ã —Ä–∞—Å—Ç—É—Ç –≤ 3 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!",
            40 * 60, // 40 –º–∏–Ω—É—Ç
            EventType.NIGHT_BOOST,
            3.0
        ));

        // –°–æ–±—ã—Ç–∏–µ "–î–æ–∂–¥—å –∏–∑ –º–æ–Ω–µ—Ç"
        events.put("coin_rain", new FarmingEvent(
            "coin_rain",
            "–î–æ–∂–¥—å –∏–∑ –º–æ–Ω–µ—Ç",
            "¬ß6‚òî –ö–∞–∂–¥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã!",
            10 * 60, // 10 –º–∏–Ω—É—Ç
            EventType.COIN_RAIN,
            1.0
        ));

        // –°–æ–±—ã—Ç–∏–µ "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å"
        events.put("master_class", new FarmingEvent(
            "master_class",
            "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å",
            "¬ßbüìö –ü–æ–ª—É—á–∞–π—Ç–µ –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞ –∑–∞ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è!",
            45 * 60, // 45 –º–∏–Ω—É—Ç
            EventType.EXPERIENCE_BOOST,
            2.0
        ));
    }

    private void startEventScheduler() {
        new BukkitRunnable() {
            @Override
            public void run() {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                if (currentEvent == null) {
                    startRandomEvent();
                } else {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                    long currentTime = System.currentTimeMillis();
                    if (currentTime - eventStartTime >= currentEvent.getDuration() * 1000) {
                        endCurrentEvent();
                    }
                }
            }
        }.runTaskTimer(plugin, 20L * 60 * 5, 20L * 60 * 5); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    }

    private void startRandomEvent() {
        if (events.isEmpty()) return;

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        List<String> eventIds = new ArrayList<>(events.keySet());
        String randomEventId = eventIds.get(new Random().nextInt(eventIds.size()));
        FarmingEvent event = events.get(randomEventId);

        currentEvent = event;
        eventStartTime = System.currentTimeMillis();

        // –û–±—ä—è–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        announceEventStart(event);
    }

    private void endCurrentEvent() {
        if (currentEvent != null) {
            announceEventEnd(currentEvent);
            currentEvent = null;
            eventStartTime = 0;
        }
    }

    private void announceEventStart(FarmingEvent event) {
        String message = "¬ßa¬ßlüéâ –°–û–ë–´–¢–ò–ï –ù–ê–ß–ê–õ–û–°–¨! " + event.getName();
        Bukkit.broadcastMessage(message);
        Bukkit.broadcastMessage(event.getDescription());
        Bukkit.broadcastMessage("¬ß7–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + formatDuration(event.getDuration()));

        // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        for (Player player : Bukkit.getOnlinePlayers()) {
            player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.0f);
            player.playSound(player.getLocation(), org.bukkit.Sound.BLOCK_NOTE_BLOCK_CHIME, 1.0f, 1.0f);
        }

        // –ß–∞—Å—Ç–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        for (Player player : Bukkit.getOnlinePlayers()) {
            player.getWorld().spawnParticle(org.bukkit.Particle.FIREWORK, player.getLocation(), 50);
        }
    }

    private void announceEventEnd(FarmingEvent event) {
        String message = "¬ßc¬ßl‚è∞ –°–û–ë–´–¢–ò–ï –ó–ê–ö–û–ù–ß–ò–õ–û–°–¨! " + event.getName();
        Bukkit.broadcastMessage(message);
        Bukkit.broadcastMessage("¬ß7–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!");

        // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
        for (Player player : Bukkit.getOnlinePlayers()) {
            player.playSound(player.getLocation(), org.bukkit.Sound.BLOCK_NOTE_BLOCK_PLING, 1.0f, 0.5f);
        }
    }

    private String formatDuration(int seconds) {
        int minutes = seconds / 60;
        int remainingSeconds = seconds % 60;
        return String.format("%d:%02d", minutes, remainingSeconds);
    }

    public FarmingEvent getCurrentEvent() {
        return currentEvent;
    }

    public boolean isEventActive() {
        return currentEvent != null;
    }

    public boolean isEventActive(String eventId) {
        return currentEvent != null && currentEvent.getId().equals(eventId);
    }

    public double getEventMultiplier(EventType type) {
        if (currentEvent != null && currentEvent.getType() == type) {
            return currentEvent.getMultiplier();
        }
        return 1.0;
    }

    public void startEvent(String eventId) {
        FarmingEvent event = events.get(eventId);
        if (event != null) {
            if (currentEvent != null) {
                endCurrentEvent();
            }
            currentEvent = event;
            eventStartTime = System.currentTimeMillis();
            announceEventStart(event);
        }
    }

    public void stopCurrentEvent() {
        if (currentEvent != null) {
            endCurrentEvent();
        }
    }

    public long getEventTimeRemaining() {
        if (currentEvent == null) return 0;
        long currentTime = System.currentTimeMillis();
        long elapsed = currentTime - eventStartTime;
        long remaining = currentEvent.getDuration() * 1000 - elapsed;
        return Math.max(0, remaining);
    }

    public String getEventStatus() {
        if (currentEvent == null) {
            return "¬ß7–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç";
        }
        
        long remaining = getEventTimeRemaining();
        int minutes = (int) (remaining / 60000);
        int seconds = (int) ((remaining % 60000) / 1000);
        
        return String.format("¬ßa%s ¬ß7(%d:%02d –æ—Å—Ç–∞–ª–æ—Å—å)", 
                           currentEvent.getName(), minutes, seconds);
    }

    public Map<String, FarmingEvent> getAllEvents() {
        return new HashMap<>(events);
    }
} 