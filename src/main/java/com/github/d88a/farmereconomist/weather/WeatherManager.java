package com.github.d88a.farmereconomist.weather;

import com.github.d88a.farmereconomist.FarmerEconomist;
import org.bukkit.Bukkit;
import org.bukkit.World;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class WeatherManager {

    private final FarmerEconomist plugin;
    private final Map<WeatherType, Double> weatherMultipliers = new HashMap<>();
    private final Random random = new Random();
    private WeatherType currentWeather = WeatherType.SUNNY;
    private int weatherDuration = 0;
    private final int MAX_WEATHER_DURATION = 20 * 60 * 30; // 30 –º–∏–Ω—É—Ç

    public enum WeatherType {
        SUNNY("–°–æ–ª–Ω–µ—á–Ω–æ", "SUNNY", "¬ße", 1.0),
        CLOUDY("–û–±–ª–∞—á–Ω–æ", "CLOUDY", "¬ß7", 0.9),
        RAINY("–î–æ–∂–¥–ª–∏–≤–æ", "RAINY", "¬ßb", 1.3),
        STORMY("–ì—Ä–æ–∑–æ–≤–æ", "STORMY", "¬ßc", 1.5),
        FOGGY("–¢—É–º–∞–Ω–Ω–æ", "FOGGY", "¬ß8", 0.8),
        WINDY("–í–µ—Ç—Ä–µ–Ω–æ", "WINDY", "¬ßf", 1.1),
        DROUGHT("–ó–∞—Å—É—Ö–∞", "DROUGHT", "¬ß6", 0.6),
        PERFECT("–ò–¥–µ–∞–ª—å–Ω–æ", "PERFECT", "¬ßa", 2.0);

        private final String displayName;
        private final String configName;
        private final String color;
        private final double growthMultiplier;

        WeatherType(String displayName, String configName, String color, double growthMultiplier) {
            this.displayName = displayName;
            this.configName = configName;
            this.color = color;
            this.growthMultiplier = growthMultiplier;
        }

        public String getDisplayName() { return displayName; }
        public String getConfigName() { return configName; }
        public String getColor() { return color; }
        public double getGrowthMultiplier() { return growthMultiplier; }
    }

    public WeatherManager(FarmerEconomist plugin) {
        this.plugin = plugin;
        setupWeatherMultipliers();
        startWeatherCycle();
    }

    private void setupWeatherMultipliers() {
        for (WeatherType type : WeatherType.values()) {
            weatherMultipliers.put(type, type.getGrowthMultiplier());
        }
    }

    private void startWeatherCycle() {
        new BukkitRunnable() {
            @Override
            public void run() {
                weatherDuration++;
                
                if (weatherDuration >= MAX_WEATHER_DURATION) {
                    changeWeather();
                    weatherDuration = 0;
                }
                
                // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ
                if (weatherDuration % (20 * 60 * 5) == 0) {
                    announceWeather();
                }
            }
        }.runTaskTimer(plugin, 20L, 20L); // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    }

    private void changeWeather() {
        WeatherType[] types = WeatherType.values();
        WeatherType newWeather;
        
        // 70% —à–∞–Ω—Å –æ–±—ã—á–Ω–æ–π –ø–æ–≥–æ–¥—ã, 30% —à–∞–Ω—Å –æ—Å–æ–±–æ–π –ø–æ–≥–æ–¥—ã
        if (random.nextDouble() < 0.7) {
            WeatherType[] normalWeather = {WeatherType.SUNNY, WeatherType.CLOUDY, WeatherType.RAINY, WeatherType.WINDY};
            newWeather = normalWeather[random.nextInt(normalWeather.length)];
        } else {
            WeatherType[] specialWeather = {WeatherType.STORMY, WeatherType.FOGGY, WeatherType.DROUGHT, WeatherType.PERFECT};
            newWeather = specialWeather[random.nextInt(specialWeather.length)];
        }
        
        if (newWeather != currentWeather) {
            WeatherType oldWeather = currentWeather;
            currentWeather = newWeather;
            announceWeatherChange(oldWeather, newWeather);
        }
    }

    private void announceWeather() {
        String message = currentWeather.getColor() + "üå§ –ü–æ–≥–æ–¥–∞: " + currentWeather.getDisplayName();
        if (currentWeather.getGrowthMultiplier() > 1.0) {
            message += " ¬ßa(–†–∞—Å—Ç–µ–Ω–∏—è —Ä–∞—Å—Ç—É—Ç –±—ã—Å—Ç—Ä–µ–µ!)";
        } else if (currentWeather.getGrowthMultiplier() < 1.0) {
            message += " ¬ßc(–†–∞—Å—Ç–µ–Ω–∏—è —Ä–∞—Å—Ç—É—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ)";
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —Å–≤–æ–∏—Ö —É—á–∞—Å—Ç–∫–∞—Ö
        for (org.bukkit.entity.Player player : Bukkit.getOnlinePlayers()) {
            if (plugin.getPlotManager().hasPlot(player)) {
                player.sendMessage(message);
            }
        }
    }

    private void announceWeatherChange(WeatherType oldWeather, WeatherType newWeather) {
        String message = newWeather.getColor() + "üå§ –ü–æ–≥–æ–¥–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: " + 
                        oldWeather.getDisplayName() + " ‚Üí " + newWeather.getDisplayName();
        
        Bukkit.broadcastMessage(message);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –æ—Å–æ–±–æ–π –ø–æ–≥–æ–¥—ã
        if (newWeather == WeatherType.STORMY) {
            Bukkit.broadcastMessage("¬ßc‚ö° –ì—Ä–æ–∑–∞ –º–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è!");
        } else if (newWeather == WeatherType.DROUGHT) {
            Bukkit.broadcastMessage("¬ß6‚òÄÔ∏è –ó–∞—Å—É—Ö–∞! –†–∞—Å—Ç–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–µ –≤–æ–¥—ã!");
        } else if (newWeather == WeatherType.PERFECT) {
            Bukkit.broadcastMessage("¬ßa‚ú® –ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞! –†–∞—Å—Ç–µ–Ω–∏—è —Ä–∞—Å—Ç—É—Ç –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!");
        }
        
        // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        for (org.bukkit.entity.Player player : Bukkit.getOnlinePlayers()) {
            switch (newWeather) {
                case STORMY:
                    player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_LIGHTNING_BOLT_THUNDER, 0.5f, 1.0f);
                    break;
                case RAINY:
                    player.playSound(player.getLocation(), org.bukkit.Sound.WEATHER_RAIN, 0.3f, 1.0f);
                    break;
                case PERFECT:
                    player.playSound(player.getLocation(), org.bukkit.Sound.BLOCK_NOTE_BLOCK_CHIME, 1.0f, 1.0f);
                    break;
            }
        }
    }

    public WeatherType getCurrentWeather() {
        return currentWeather;
    }

    public double getWeatherMultiplier() {
        return currentWeather.getGrowthMultiplier();
    }

    public String getWeatherInfo() {
        return currentWeather.getColor() + "–ü–æ–≥–æ–¥–∞: " + currentWeather.getDisplayName() + 
               " (x" + String.format("%.1f", currentWeather.getGrowthMultiplier()) + " —Ä–æ—Å—Ç)";
    }

    public int getWeatherDuration() {
        return weatherDuration;
    }

    public void setWeather(WeatherType weather) {
        WeatherType oldWeather = currentWeather;
        currentWeather = weather;
        weatherDuration = 0;
        announceWeatherChange(oldWeather, weather);
    }

    public boolean isSpecialWeather() {
        return currentWeather == WeatherType.STORMY || 
               currentWeather == WeatherType.FOGGY || 
               currentWeather == WeatherType.DROUGHT || 
               currentWeather == WeatherType.PERFECT;
    }

    public String getWeatherEffect() {
        switch (currentWeather) {
            case STORMY:
                return "¬ßc‚ö° –ì—Ä–æ–∑–∞ –º–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è";
            case DROUGHT:
                return "¬ß6‚òÄÔ∏è –ó–∞—Å—É—Ö–∞! –†–∞—Å—Ç–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–µ –≤–æ–¥—ã";
            case PERFECT:
                return "¬ßa‚ú® –ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞! –†–∞—Å—Ç–µ–Ω–∏—è —Ä–∞—Å—Ç—É—Ç –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ";
            case FOGGY:
                return "¬ß8üå´ –¢—É–º–∞–Ω –∑–∞–º–µ–¥–ª—è–µ—Ç —Ä–æ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π";
            case RAINY:
                return "¬ßbüåß –î–æ–∂–¥—å —É—Å–∫–æ—Ä—è–µ—Ç —Ä–æ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π";
            default:
                return "¬ß7–û–±—ã—á–Ω–∞—è –ø–æ–≥–æ–¥–∞";
        }
    }
} 