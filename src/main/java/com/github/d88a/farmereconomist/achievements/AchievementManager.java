package com.github.d88a.farmereconomist.achievements;

import com.github.d88a.farmereconomist.FarmerEconomist;
import com.github.d88a.farmereconomist.data.DataManager;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;

import java.io.File;
import java.io.IOException;
import java.util.*;

public class AchievementManager {

    private final FarmerEconomist plugin;
    private final DataManager dataManager;
    private final Map<UUID, Set<String>> playerAchievements = new HashMap<>();
    private final Map<String, Achievement> achievements = new HashMap<>();

    public AchievementManager(FarmerEconomist plugin, DataManager dataManager) {
        this.plugin = plugin;
        this.dataManager = dataManager;
        loadAchievements();
        loadPlayerAchievements();
    }

    private void loadAchievements() {
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å–∞–¥–∫—É —Ä–∞—Å—Ç–µ–Ω–∏–π
        achievements.put("first_plant", new Achievement("first_plant", "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", 
            "–ü–æ—Å–∞–¥–∏—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ", 50, "WHEAT_SEEDS"));
        
        achievements.put("plant_master", new Achievement("plant_master", "–ú–∞—Å—Ç–µ—Ä –ø–æ—Å–∞–¥–∫–∏", 
            "–ü–æ—Å–∞–¥–∏—Ç–µ 100 —Ä–∞—Å—Ç–µ–Ω–∏–π", 500, "WHEAT"));
        
        achievements.put("crop_collector", new Achievement("crop_collector", "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä", 
            "–í—ã—Ä–∞—Å—Ç–∏—Ç–µ –≤—Å–µ –≤–∏–¥—ã –±–∞–∑–æ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä", 1000, "BOOK"));
        
        achievements.put("exotic_farmer", new Achievement("exotic_farmer", "–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π —Ñ–µ—Ä–º–µ—Ä", 
            "–í—ã—Ä–∞—Å—Ç–∏—Ç–µ –≤—Å–µ –≤–∏–¥—ã —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏—Ö –∫—É–ª—å—Ç—É—Ä", 2000, "NETHER_STAR"));
        
        achievements.put("harvest_king", new Achievement("harvest_king", "–ö–æ—Ä–æ–ª—å —É—Ä–æ–∂–∞—è", 
            "–°–æ–±–µ—Ä–∏—Ç–µ 1000 —Ä–∞—Å—Ç–µ–Ω–∏–π", 1500, "GOLDEN_HOE"));
        
        achievements.put("water_master", new Achievement("water_master", "–ú–∞—Å—Ç–µ—Ä –ø–æ–ª–∏–≤–∞", 
            "–ü–æ–ª–µ–π—Ç–µ 500 —Ä–∞—Å—Ç–µ–Ω–∏–π", 300, "WATER_BUCKET"));
        
        achievements.put("fertilizer_expert", new Achievement("fertilizer_expert", "–≠–∫—Å–ø–µ—Ä—Ç –ø–æ —É–¥–æ–±—Ä–µ–Ω–∏—è–º", 
            "–£–¥–æ–±—Ä–∏—Ç–µ 200 —Ä–∞—Å—Ç–µ–Ω–∏–π", 400, "BONE_MEAL"));
        
        achievements.put("plot_expander", new Achievement("plot_expander", "–†–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å —É—á–∞—Å—Ç–∫–æ–≤", 
            "–†–∞—Å—à–∏—Ä—å—Ç–µ —Å–≤–æ–π —É—á–∞—Å—Ç–æ–∫ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞", 800, "GRASS_BLOCK"));
        
        achievements.put("rich_farmer", new Achievement("rich_farmer", "–ë–æ–≥–∞—Ç—ã–π —Ñ–µ—Ä–º–µ—Ä", 
            "–ù–∞–∫–æ–ø–∏—Ç–µ 10,000 –º–æ–Ω–µ—Ç", 1000, "GOLD_INGOT"));
        
        achievements.put("millionaire", new Achievement("millionaire", "–ú–∏–ª–ª–∏–æ–Ω–µ—Ä", 
            "–ù–∞–∫–æ–ø–∏—Ç–µ 100,000 –º–æ–Ω–µ—Ç", 5000, "DIAMOND"));
        
        achievements.put("seasonal_farmer", new Achievement("seasonal_farmer", "–°–µ–∑–æ–Ω–Ω—ã–π —Ñ–µ—Ä–º–µ—Ä", 
            "–í—ã—Ä–∞—Å—Ç–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—ã –≤–æ –≤—Å–µ—Ö —Å–µ–∑–æ–Ω–∞—Ö", 1200, "CLOCK"));
        
        achievements.put("weather_master", new Achievement("weather_master", "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ø–æ–≥–æ–¥—ã", 
            "–í—ã—Ä–∞—Å—Ç–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—ã –ø—Ä–∏ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö –ø–æ–≥–æ–¥—ã", 800, "LIGHTNING_ROD"));
        
        achievements.put("speed_farmer", new Achievement("speed_farmer", "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ñ–µ—Ä–º–µ—Ä", 
            "–°–æ–±–µ—Ä–∏—Ç–µ 50 —Ä–∞—Å—Ç–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å", 600, "CLOCK"));
        
        achievements.put("lucky_farmer", new Achievement("lucky_farmer", "–£–¥–∞—á–ª–∏–≤—ã–π —Ñ–µ—Ä–º–µ—Ä", 
            "–ü–æ–ª—É—á–∏—Ç–µ –¥–≤–æ–π–Ω–æ–π —É—Ä–æ–∂–∞–π 10 —Ä–∞–∑", 400, "LUCK_POTION"));
        
        achievements.put("perfect_farmer", new Achievement("perfect_farmer", "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ñ–µ—Ä–º–µ—Ä", 
            "–í—ã—Ä–∞—Å—Ç–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Ö–æ–¥–æ–º (–ø–æ–ª–∏–≤ + —É–¥–æ–±—Ä–µ–Ω–∏–µ)", 300, "EMERALD"));
        
        achievements.put("social_farmer", new Achievement("social_farmer", "–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–µ—Ä–º–µ—Ä", 
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —É—Ä–æ–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º", 200, "PLAYER_HEAD"));
        
        achievements.put("night_farmer", new Achievement("night_farmer", "–ù–æ—á–Ω–æ–π —Ñ–µ—Ä–º–µ—Ä", 
            "–í—ã—Ä–∞—Å—Ç–∏—Ç–µ —Å–≤–µ—Ç—è—â–∏–µ—Å—è –∫—É–ª—å—Ç—É—Ä—ã", 350, "GLOWSTONE"));
        
        achievements.put("desert_farmer", new Achievement("desert_farmer", "–ü—É—Å—Ç—ã–Ω–Ω—ã–π —Ñ–µ—Ä–º–µ—Ä", 
            "–í—ã—Ä–∞—Å—Ç–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—ã –≤ –ø—É—Å—Ç—ã–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö", 450, "SAND"));
        
        achievements.put("mountain_farmer", new Achievement("mountain_farmer", "–ì–æ—Ä–Ω—ã–π —Ñ–µ—Ä–º–µ—Ä", 
            "–í—ã—Ä–∞—Å—Ç–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—ã –Ω–∞ –±–æ–ª—å—à–æ–π –≤—ã—Å–æ—Ç–µ", 400, "STONE"));
        
        achievements.put("ocean_farmer", new Achievement("ocean_farmer", "–û–∫–µ–∞–Ω—Å–∫–∏–π —Ñ–µ—Ä–º–µ—Ä", 
            "–í—ã—Ä–∞—Å—Ç–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—ã —Ä—è–¥–æ–º —Å –≤–æ–¥–æ–π", 300, "WATER_BUCKET"));
    }

    public void unlockAchievement(Player player, String achievementId) {
        UUID playerId = player.getUniqueId();
        
        if (!playerAchievements.containsKey(playerId)) {
            playerAchievements.put(playerId, new HashSet<>());
        }
        
        Set<String> playerAchs = playerAchievements.get(playerId);
        
        if (!playerAchs.contains(achievementId)) {
            Achievement achievement = achievements.get(achievementId);
            if (achievement != null) {
                playerAchs.add(achievementId);
                
                // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
                plugin.getEconomyManager().addBalance(player, achievement.getReward());
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                player.sendMessage("¬ßa¬ßlüèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–û! ¬ßa" + achievement.getName());
                player.sendMessage("¬ß7" + achievement.getDescription());
                player.sendMessage("¬ß6–ù–∞–≥—Ä–∞–¥–∞: " + achievement.getReward() + " –º–æ–Ω–µ—Ç");
                
                // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
                player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.0f);
                
                // –ß–∞—Å—Ç–∏—Ü—ã
                player.getWorld().spawnParticle(org.bukkit.Particle.FIREWORK, player.getLocation(), 20);
                
                savePlayerAchievements();
            }
        }
    }

    public boolean hasAchievement(Player player, String achievementId) {
        UUID playerId = player.getUniqueId();
        return playerAchievements.containsKey(playerId) && 
               playerAchievements.get(playerId).contains(achievementId);
    }

    public Set<String> getPlayerAchievements(Player player) {
        UUID playerId = player.getUniqueId();
        return playerAchievements.getOrDefault(playerId, new HashSet<>());
    }

    public Map<String, Achievement> getAllAchievements() {
        return new HashMap<>(achievements);
    }

    public int getAchievementProgress(Player player) {
        return getPlayerAchievements(player).size();
    }

    public int getTotalAchievements() {
        return achievements.size();
    }

    public double getCompletionPercentage(Player player) {
        if (achievements.isEmpty()) return 0.0;
        return (double) getAchievementProgress(player) / achievements.size() * 100.0;
    }

    private void loadPlayerAchievements() {
        File file = new File(plugin.getDataFolder(), "achievements.yml");
        if (file.exists()) {
            FileConfiguration config = YamlConfiguration.loadConfiguration(file);
            ConfigurationSection section = config.getConfigurationSection("players");
            if (section != null) {
                for (String playerId : section.getKeys(false)) {
                    UUID uuid = UUID.fromString(playerId);
                    List<String> achievementList = section.getStringList(playerId);
                    playerAchievements.put(uuid, new HashSet<>(achievementList));
                }
            }
        }
    }

    public void saveAchievements() {
        savePlayerAchievements();
    }

    private void savePlayerAchievements() {
        File file = new File(plugin.getDataFolder(), "achievements.yml");
        FileConfiguration config = new YamlConfiguration();
        
        for (Map.Entry<UUID, Set<String>> entry : playerAchievements.entrySet()) {
            config.set("players." + entry.getKey().toString(), new ArrayList<>(entry.getValue()));
        }
        
        try {
            config.save(file);
        } catch (IOException e) {
            plugin.getLogger().severe("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: " + e.getMessage());
        }
    }
} 